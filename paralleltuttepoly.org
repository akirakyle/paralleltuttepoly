#+title: Parallel Computation of the Tutte Polynomial
#+subtitle: 15-418: Project #71
#+author: Akira Kyle
#+date: April 18, 2018
#+email: akyle@cmu.edu
#+options: toc:nil email:t
#+latex_header_extra: \pagestyle{fancy}
#+latex_header_extra: \fancyhead[R]{Akira Kyle}
#+latex_header_extra: \fancyhead[L]{15-418}
#+latex_header_extra: \fancyhead[C]{Parallel Computation of the Tutte Polynomial}
#+latex_header_extra: \fancyfoot[C]{\thepage}

* Links
** Tutte background
[[https://en.wikipedia.org/wiki/Tutte_polynomial]]
Brendan McKay Nauty and Traces [[http://pallini.di.uniroma1.it/]]
Haggard C++ tuttepoly code [[http://homepages.ecs.vuw.ac.nz/~djp/tutte/]]
Mathematica tutte polynomial function [[http://reference.wolfram.com/language/ref/TuttePolynomial.html]]
Monagan maple tutte polynomial code [[http://www.cecm.sfu.ca/~mmonagan/tutte/]]
Vertex-exponential time tutte polynomial [[https://github.com/thorehusfeldt/tutte_bhkk]]
Blog post using tutte_bhkk in python [[http://mhenderson.net/page3/]]
** Five-flow
https://symomega.wordpress.com/2010/06/13/roots-of-flow-polynomials-and-welshs-conjecture/

** Fortran
http://www.featflow.de/en/software/featflow2/tutorial/tutorial_lang.html
https://en.wikibooks.org/wiki/Fortran
http://www.cs.rpi.edu/~szymansk/OOF90/bugs.html
http://kitchingroup.cheme.cmu.edu/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode/


* Project proposal
** Summary
 I will implement and optimize an algorithm to compute the Tutte Polynomial for
 arbitrary graphs using both MPI and openMP. I will examine the effect of
 different edge selection heuristics on the performance scaling of the program. 

** Background
 In the search for a proof to the four color theorem, the mathematician George
 David Birkhoff came up with the Chromatic Polynomial which counts the number of
 possible colorings of a graph as a function of $k$ possible colors to color it
 with. If one can show that this polynomial is positive for all planar graphs
 when $k=4$, then one proves the four color theorem. While it didn't prove useful
 in actually proving the four color theorem, W.T. Tutte generalized this
 chromatic polynomial to the Tutte Polynomial which has become an important Graph
 invariant that has been related to results from knot theory, combinatorics, and
 statistical physics. 

 The Tutte Polynomial can be defined recursively using edge contraction ($G/e$)
 and edge deletion ($G - e$) on an undirected graph $G$ as

 \[T_G(x,y) = T_{G-e}(x,y) + T_{G/e}(x,y)\]

 where $e$ must be neither a bridge nor a loop. The base case being when $G$
 contains only $i$ bridges and $j$ loops is $T_G(x,y) = x^iy^j$

 The Tutte polynomial can also be given in closed form for a graph $G = (V, E)$
 by:

 \[T_G(x,y) = \sum_A\subseteq E (x-1)^{k(A) - k(E)}(y-1)^{k(A) + |A| - |V|}\] 

 Where $k(A)$ is the number of connected components of $(V,A)$. 

 From this statement of the Tutte polynomial one can guess that it happens to #P
 hard, as the sum is over the power set of the edges. Evaluating the it a various
 points yields various results of interest, for example $y=0$ gives the chromatic
 polynomial. The Wikipedia page has a good summary of this discussion
 ([[https://en.wikipedia.org/wiki/Tutte_polynomial]]).

** The Challenge

 Between the two definitions given above, the recursive definition is the most
 promising for implementing a fast algorithm. This is because it naturally
 creates a computation tree with potentially redundant computation being
 performed along some branches which we can use Dynamic Programming ideas to
 speedup. The following illustration (taken from the wikipedia article)
 illustrates an example of calculating the Tutte polynomial using the recursive
 deletion-contraction definition.

 #+attr_latex: :width 4in
 [[file:figs/Deletion-contraction.svg]]

 To find branches with redundant computation we need to be able to identify
 isomorphic graphs. One of the most prominent programs for doing so is the nauty
 and Traces program written by Brendan McKay ([[http://pallini.di.uniroma1.it/]]).
 This program can output a canonical labeling for a graph which can then be used
 as a key in a graph cache.

 The interesting issues to consider in paralleling this will be surrounding this
 cache as it is the central part to speeding up this otherwise intractable
 computation. Sharing this cache safely and efficiently across all the processes
 in MPI may be difficult and might benefit from compressing the graphs. Also
 locking the cache data structure within a process in openMP when it needs to be
 updated will be tricky to keep the overhead low.

 Furthermore while each of the two recursive calls can be done in parallel, it is
 not guaranteed that each will have an equal division of work, especially if one
 side ends up having more cache hits than the other, so scheduling will be
 another issue that will likely have to be done dynamically, potentially with
 some type of work queue. Hiding latency can be a potential area for speedups
 since finding the graph isomorphisms is a relatively compute intensive process
 while the cache lookup and additions are a memory intensive process. Finally the
 usual

** Resources
 /Computing Tutte Polynomials/ by Gary Haggard, David J. Pearce, and Gordon Royle
 (2010) will probably be the basis of my implementation as they seem to have the
 ``current'' best implementation. Their code is available on David Pearce’s web-
 site at [[http://homepages.ecs.vuw.ac.nz/~djp/tutte/]] and is implemented in C++.
 This will serve as my reference to check against for both correctness and
 sequential performance, however I will likely rewrite this from scratch in
 fortran (since I'll be spending my summer internship in fortran so I'd like to
 get some practice) to ensure I understand the algorithm completely (it's not a
 very substantial amount of code). Like their implementation, I will use Brendan
 McKay's nauty for finding graph isomorphisms.

 I may also checkout Mathematica's function to compute the Tutte polynomial as
 another benchmark to compare to
 ([[http://reference.wolfram.com/language/ref/TuttePolynomial.html]]).

 Furthermore a more recent paper /A new edge selection heuristic for computing
 the Tutte polynomial of an undirected graph./ by Michael Monagan (2018) proposes
 a different heuristic from those of Haggard, Pearce, Royale that Monagan claims
 offers massive speedups on many types of graphs. His implementation is in Maple
 and is available at [[http://www.cecm.sfu.ca/~mmonagan/tutte/]].

 Finally an older paper /Computing the Tutte Polynomial in Vertex-Exponential
 Time/ by Andreas Björklund, Thore Husfeldt, Petteri Kaski, Mikko Koivisto (2008)
 which is referenced by Haggard, Pearce, Royle has code available here
 [[https://github.com/thorehusfeldt/tutte_bhkk]] along with a nice blog post
 using it here [[http://mhenderson.net/page3/]].

 I think between the latedays cluster and the ghc machines, I will be sufficient
 hardware to perform scaling experiments and performance assessments.

** Goals and Deliverables
*** Plan to achieve
 - A complete working program using MPI capable of correctly computing Tutte
   polynomials at speeds comparable to the reference implementations and with
   good performance scaling .
 - The three edge selection heuristics (2 from Haggard, Pearce, Royle, 1 from
   Monagan) implemented and a comparison of their performance scaling.

*** Hope to achieve
 - Verifying the result listed of Pearce's website of the Tutte polynomial of the
   Truncated Icosahedron.

 Haggard, Pearce, Royle claim it took one week on 150 machines to calculate,
 however Monagan claims it took four minutes on a single cpu using his edge
 selection heuristic. I would like to be able to meet and exceed both of these
 benchmarks for performance however its difficult to specify a speedup since
 Pearce doesn't list the machine specs used, however given this was achieved in
 2009, I expect the specs on the latedays cluster to be much better. As for the
 Monagan result, since he implemented this in Mapel using no isomorphism test, I
 would hope to get at least a 2x speedup (conservative) due to not having the
 overhead of the maple runtime and additional speedup of from additional pruning
 the computation tree due to isomorphisms.

 - An openMP implementation to compare with the MPI implementation.
 - A combined MPI and openMP implementation to compare to the individual
   implementations.

** Platform Choice
 I will use fortran (since I'll be spending my summer internship in fortran so
 I'd like to get some practice) and MPI and openMP and run on the latedays
 cluster and ghc machines. For this type of application MPI is the most important
 to utilize since to have hope to scale to really massive graphs exceeding what
 can be held in memory by a single machine, it is necessary to use a distributed
 model.

** Schedule
 - Week of April 16th
   - Test harness and sequential implementation
   - Understanding of nauty canonical labeling format and code to interface with
     it (necessary for graph cache)
 - Week of April 23rd
   - Parallel MPI implementation with graph cache and Haggard, Pearce, Royle
     heuristics 
 - Week of April 30th
   - Parallel OpenMP implementation with Monagan heuristic.


* Nauty info

#+begin_example
$ ./nautest 
NAUTYVERSION=2.6 (64 bits)  NAUTYVERSIONID=26040  HAVE_TLS=0
MAXN=0  MAXM=0  WORDSIZE=64  NAUTY_INFINITY=2000000002
sizes: short=2 int=4 long=8 double=8 boolean=4 setword=8
CLZ=1,1,1  POPCNT=1,1,1;0,0
LONG_LONG_COUNTERS=0  COUNTER_FMT=%lu
defined: __STDC__ SETWORD_LONG
DOPROMPT(stdin)=1 DOPROMPT(stdout)=1
CPUTIME = 0.000000
INITSEED: seed=416931912
#+end_example


* Code
** setup
#+begin_src bash :dir ~/class/parallel/project :results raw drawer
rsync -azP --no-perms ~/class/parallel/project/nauty26r10 latedays:
rsync -azP --no-perms ~/class/parallel/project/tuttepoly-v0.9.18 latedays:
#+end_src

#+begin_src bash :dir /ssh:latedays:nauty26r10 :results raw drawer
./configure
make
#+end_src

#+begin_src bash :dir /ssh:latedays:tuttepoly-v0.9.18 :results raw drawer
./configure CXXFLAGS='-g -O2 -std=c++11'
make
#+end_src

** tests
   :PROPERTIES:
   :header-args: :dir /ssh:latedays:paralleltuttepoly :results raw drawer
   :END:

#+begin_src bash :results raw drawer
for i in `seq 10 32`; do
    sed -e 's/,/\n/g' -e 's/--/:/g' -e '1i\n='$i' g' -e '$a\.\nT' \
        hprtutte/examples/edge$i | nauty/dreadnaut > graphs/hpr/edge$i.dre
done
#+end_src

#+RESULTS:
:RESULTS:
:END:

#+NAME: graph-files
| c3e |

#+name: graphdot
#+begin_src bash :results verbatim :var fname=graph-files[0]
nauty/geng 4 | sed -n 8p | nauty/showg -d > graphs/$fname.dre
nauty/dretodot graphs/$fname.dre
#+end_src

#+RESULTS: graphdot
:RESULTS:
graph G
{
graph [center="true", size="10.00, 6.18", ratio="fill", ranksep="0.25", nodesep="0.40",
       outputorder="edgesfirst", overlap="scale", layout="dot"];
node  [shape="circle", width="0.50", height="0.50", fixedsize="true",
       style="filled", color="black",
       fontsize="13", fontname="Arial Narrow"];
node  [color="black", fontcolor="black"]
     0 [fontsize="21.66", fillcolor="#77BB33"]
     1 [fontsize="21.66", fillcolor="#77BB33"]
     2 [fontsize="21.66", fillcolor="#77BB33"]
     3 [fontsize="21.66", fillcolor="#77BB33"]
edge  [penwidth="0.8", color="black", weight="10"];
0 -- 2;
0 -- 3;
1 -- 3;
2 -- 3;
}
:END:

#+begin_src bash :results silent :dir ~/class/parallel/project/paralleltuttepoly/graphs/viz :var graphdot=graphdot fname=graph-files[0]
# echo $graphdot | dot2tex -f tikz > $fname.tex
# pdflatex $fname.tex
echo $graphdot | dot -Tpdf -o $fname.pdf
open $fname.pdf
#+end_src

#+begin_src bash :results raw drawer :var fname=graph-files[0]
nauty/dretog graphs/$fname.dre | nauty/showg -qe | \
sed -e '2!d' -e 's/  /,/g' -e 's/ /--/g' > output/hprtutte.in
cat output/hprtutte.in

nauty/dretog graphs/$fname.dre > output/mytutte.in
cat output/mytutte.in
#+end_src

#+RESULTS:
:RESULTS:
0--2,0--3,1--3,2--3
CV
:END:


#+name: make
#+begin_src bash :results raw drawer :var fname=graph-files[0]
make
#+end_src

#+RESULTS: make
:RESULTS:
gcc -g -O3 -Wall -Wno-unused-variable -std=gnu99  -o tutte mgraph.c poly.c tutte.c findtutte.c nauty/nauty.a  -Inauty
:END:

#+begin_src bash :results raw drawer :var fname=graph-files[0]
./tutte output/mytutte.in > output/mytutte/$fname.out
cat output/mytutte/$fname.out
#+end_src

#+RESULTS:
:RESULTS:
  0   0   1   1 
  0   0   0   1 
  1   0   0   1 
  1   1   1   0 
selected : 1(0, 2)
recursive
  0   0   0   1 
  0   0   0   1 
  0   0   0   1 
  1   1   1   0 
selected : 1(0, 3)
bridge
  0   1   1   0 
  1   0   0   0 
  1   0   0   0 
  0   0   0   0 
selected : 1(0, 1)
bridge
  0   0   1   0 
  0   0   0   0 
  1   0   0   0 
  0   0   0   0 
selected : 1(0, 2)
bridge
  0   0   0   0 
  0   0   0   0 
  0   0   0   0 
  0   0   0   0 
selected : -1(-1, -1)
base case
T = 1 :
T = 1*x :
T = 1*x^2 :
T = 1*x^3 :
  0   0   0   2 
  0   0   0   1 
  0   0   0   0 
  2   1   0   0 
selected : 1(0, 3)
recursive
  0   0   0   1 
  0   0   0   1 
  0   0   0   0 
  1   1   0   0 
selected : 1(0, 3)
bridge
  0   1   0   0 
  1   0   0   0 
  0   0   0   0 
  0   0   0   0 
selected : 1(0, 1)
bridge
  0   0   0   0 
  0   0   0   0 
  0   0   0   0 
  0   0   0   0 
selected : -1(-1, -1)
base case
T = 1 :
T = 1*x :
T = 1*x^2 :
  1   1   0   0 
  1   0   0   0 
  0   0   0   0 
  0   0   0   0 
selected : 1(0, 0)
loop
  0   1   0   0 
  1   0   0   0 
  0   0   0   0 
  0   0   0   0 
selected : 1(0, 1)
bridge
  0   0   0   0 
  0   0   0   0 
  0   0   0   0 
  0   0   0   0 
selected : -1(-1, -1)
base case
T = 1 :
T = 1*x :
T = 1*x*y :
T = 1*x*y + 1*x^2 :
T = 1*x*y + 1*x^2 + 1*x^3 :
T = 1*x*y + 1*x^2 + 1*x^3 :
:END:

#+begin_src bash :results raw drawer :var fname=graph-files[0]
hprtutte/tutte/tutte output/hprtutte.in > output/hprtutte/$fname.out
cat output/hprtutte/$fname.out
#+end_src
#+RESULTS:
:RESULTS:
G[1] := {0--2,0--3,1--3,2--3}
TP[1] := 1*x*y + 1*x^2 + 1*x^3 :
:END:


#+begin_src bash :session :results raw drawer :var fname=graph-files[0]
./polyDiff.py 10 output/hprtutte/$fname.out output/mytutte/$fname.out
#+end_src

#+RESULTS:
:RESULTS:
regexp found multiple terms
regexp found multiple terms
regexp found multiple terms
x^0*y^1 : 0 != 1
x^1*y^0 : 0 != 1
regexp found multiple terms
regexp found multiple terms
x^1*y^2 : 0 != 1
x^2*y^2 : 0 != 1
regexp found multiple terms
regexp found multiple terms
x^2*y^3 : 0 != 1
regexp found multiple terms
regexp found multiple terms
regexp found multiple terms
x^3*y^3 : 0 != 1
:END:

