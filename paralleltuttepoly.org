#+title: Parallel Computation of the Tutte Polynomial
#+subtitle: 15-418: Project #71
#+author: Akira Kyle
#+date: April 18, 2018
#+email: akyle@cmu.edu
#+options: toc:nil email:t
#+latex_header_extra: \pagestyle{fancy}
#+latex_header_extra: \fancyhead[R]{Akira Kyle}
#+latex_header_extra: \fancyhead[L]{15-418}
#+latex_header_extra: \fancyhead[C]{Parallel Computation of the Tutte Polynomial}
#+latex_header_extra: \fancyfoot[C]{\thepage}

* Links
** Tutte background
[[https://en.wikipedia.org/wiki/Tutte_polynomial]]
Brendan McKay Nauty and Traces [[http://pallini.di.uniroma1.it/]]
Haggard C++ tuttepoly code [[http://homepages.ecs.vuw.ac.nz/~djp/tutte/]]
Mathematica tutte polynomial function [[http://reference.wolfram.com/language/ref/TuttePolynomial.html]]
Monagan maple tutte polynomial code [[http://www.cecm.sfu.ca/~mmonagan/tutte/]]
Vertex-exponential time tutte polynomial [[https://github.com/thorehusfeldt/tutte_bhkk]]
Blog post using tutte_bhkk in python [[http://mhenderson.net/page3/]]
** Five-flow
https://symomega.wordpress.com/2010/06/13/roots-of-flow-polynomials-and-welshs-conjecture/

** Fortran
http://www.featflow.de/en/software/featflow2/tutorial/tutorial_lang.html
https://en.wikibooks.org/wiki/Fortran
http://www.cs.rpi.edu/~szymansk/OOF90/bugs.html
http://kitchingroup.cheme.cmu.edu/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode/

** Chain decomposition
https://en.wikipedia.org/wiki/Bridge_(graph_theory)#Bridge-Finding_with_Chain_Decompositions
** Nauty
http://mailman.anu.edu.au/pipermail/nauty/2004-February/000121.html
http://mailman.anu.edu.au/pipermail/nauty/2004-April/000166.html


* Nauty info

#+begin_example
$ ./nautest 
NAUTYVERSION=2.6 (64 bits)  NAUTYVERSIONID=26040  HAVE_TLS=0
MAXN=0  MAXM=0  WORDSIZE=64  NAUTY_INFINITY=2000000002
sizes: short=2 int=4 long=8 double=8 boolean=4 setword=8
CLZ=1,1,1  POPCNT=1,1,1;0,0
LONG_LONG_COUNTERS=0  COUNTER_FMT=%lu
defined: __STDC__ SETWORD_LONG
DOPROMPT(stdin)=1 DOPROMPT(stdout)=1
CPUTIME = 0.000000
INITSEED: seed=416931912
#+end_example


* setup
#+begin_src bash :dir ~/class/parallel/project :results raw drawer
rsync -azP --no-perms ~/class/parallel/project/nauty26r10 latedays:
rsync -azP --no-perms ~/class/parallel/project/tuttepoly-v0.9.18 latedays:
#+end_src

#+begin_src bash :dir /ssh:latedays:nauty26r10 :results raw drawer
./configure
make
#+end_src

#+begin_src bash :dir /ssh:latedays:tuttepoly-v0.9.18 :results raw drawer
./configure CXXFLAGS='-g -O2 -std=c++11'
make
#+end_src

#+begin_src bash :dir /ssh:latedays:paralleltuttepoly :results raw drawer
for i in `seq 10 32`; do
    sed -e 's/,/\n/g' -e 's/--/:/g' -e '1i\n='$i' g' -e '$a\.\nT' \
        hprtutte/examples/edge$i | nauty/dreadnaut > graphs/hpr/edge$i.dre
done
#+end_src

#+RESULTS:
:RESULTS:
:END:

* onetest
  :PROPERTIES:
  :header-args: :dir /ssh:latedays:paralleltuttepoly :results raw drawer
  :END:
#   :header-args: :session latedays :results raw drawer

#+name: test_fns
#+begin_src bash :tangle regress.sh
function mytutte {
    ./tutte
}
function hprtutte() {
    gtoHPRg | hprtutte/tutte/tutte --stdin
}
function gtoHPRg() {
    nauty/showg -qe | sed -e '2!d' -e 's/  /,/g' -e 's/ /--/g'
}
function gengtest() {
    nauty/geng -q $1 | sed $2'!d'
}
function dretest() {
    nauty/dretog -q graphs/$1
}
function dotviz() {
    nauty/showg -d | nauty/dretodot | dot -Tpdf -o output/viz/$1  2> /dev/null
# echo $graphdot | dot2tex -f tikz > $fname.tex
# pdflatex $fname.tex
}
function multigengtest() {
    mkdir -p output/geng
    for i in `seq 2 $2`; do
#        gengtest $1 $i | dotviz geng-$1-$i.pdf
        gengtest $1 $i | mytutte > output/geng/mytutte-$1-$i.out
        gengtest $1 $i | hprtutte > output/geng/hprtutte-$1-$i.out
        ./polyDiff.py $1 output/geng/mytutte-$1-$i.out output/geng/hprtutte-$1-$i.out
    done
}
function multidretest() {
    mkdir -p output/$1
    for i in $( ls graphs/$1 ); do
#        dretest $1/$i | dotviz dre-$1-$i.pdf
        dretest $1/$i | mytutte > output/$1/mytutte-$i.out
        dretest $1/$i | hprtutte > output/$1/hprtutte-$i.out
        n=$( cat graphs/$1/$i | grep -o -E 'n=[0-9]+' | sed 's/[^0-9]*//g' )
        ./polyDiff.py $n output/'$1'/mytutte-$i.out output/'$1'/hprtutte-$i.out
    done
}
function regress() {
    multigengtest 2 2
    multigengtest 3 4
    multigengtest 4 11
    multigengtest 5 34
    multigengtest 6 156
    #multigengtest 7 1044
    #multidretest test
}
#+end_src

#+RESULTS: test_fns
:RESULTS:
:END:

#+begin_src bash :noweb yes
{{{test_fns}}}
function onetest() {
    #dretest hpr/edge14.dre
    #gengtest 7 773
    gengtest 4 6
}
make
onetest | dotviz graph.pdf
onetest | mytutte #> mytutte.out
echo
onetest | hprtutte #> hprtutte.out
#./polyDiff.py 7 mytutte.out hprtutte.out
#+end_src

#+RESULTS:
:RESULTS:
make: Nothing to be done for `all'.
bfs queue:
len=1
0x1c25490: g: 0x1c253d0, parent: 0x1c25460, type: -1
len=1
0x1c25620: g: 0x1c253d0, parent: 0x1c254d0, type: 1
len=1
0x1c25690: g: 0x1c253d0, parent: 0x1c25640, type: 1
len=1
0x1c25700: g: 0x1c253d0, parent: 0x1c256b0, type: 1
dfs tutte:
poly stuff:
len=4
0x1c254d0: parent: 0x1c25460, type: 1, dctype: -1, pd: (nil), pc: (nil)
0x1c25640: parent: 0x1c254d0, type: 1, dctype: 1, pd: (nil), pc: (nil)
0x1c256b0: parent: 0x1c25640, type: 1, dctype: 1, pd: (nil), pc: (nil)
0x1c25720: parent: 0x1c256b0, type: 3, dctype: 1, pd: (nil), pc: (nil)
c1: 0, c2:0, c3:0
len=3
0x1c254d0: parent: 0x1c25460, type: 1, dctype: -1, pd: (nil), pc: (nil)
0x1c25640: parent: 0x1c254d0, type: 1, dctype: 1, pd: (nil), pc: (nil)
0x1c256b0: parent: 0x1c25640, type: 1, dctype: 1, pd: (nil), pc: 0x1c256e0
T = 1 :
c1: 0, c2:0, c3:0
len=2
0x1c254d0: parent: 0x1c25460, type: 1, dctype: -1, pd: (nil), pc: (nil)
0x1c25640: parent: 0x1c254d0, type: 1, dctype: 1, pd: (nil), pc: 0x1c255c0
T = 1*x :
c1: 0, c2:0, c3:0
len=1
0x1c254d0: parent: 0x1c25460, type: 1, dctype: -1, pd: (nil), pc: 0x1c255e0
T = 1*x^2 :
c1: 0, c2:0, c3:0
T = 1*x^3 :
Time : 0.00

G[1] := {0--2,0--3,1--3}
TP[1] := 1*x^3 :
=======
V = 4, E = 3
Size of Computation Tree: 1 graphs.
Number of Biconnected Components Extracted: 0.
Number of Biconnected Components Separated: 0.
Number of Cycles Terminated: 0.
Number of Trees Terminated: 1.
Number of Completed Graphs Terminated: 0.
Time : 0s
T(1,1) = 1
T(2,2) = 8 (should be 8)
T(-1,-1) = -2^0
:END:


* local variables
# Local Variables:
# org-babel-noweb-wrap-start: "{{{"
# org-babel-noweb-wrap-end: "}}}"
# End:
